<?php
/**
 * CreditNoteResponsePayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Monite Partner API
 *
 * The Monite REST API, for Monite partners to integrate with our solution.
 *
 * The version of the OpenAPI document: 2023-03-14
 * Contact: developers@monite.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreditNoteResponsePayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditNoteResponsePayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditNoteResponsePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'document_id' => 'string',
        'currency' => '\OpenAPI\Client\Model\CurrencyEnum',
        'subtotal' => 'int',
        'line_items' => '\OpenAPI\Client\Model\ResponseItem[]',
        'entity_address' => '\OpenAPI\Client\Model\EntityAddressSchema',
        'entity' => '\OpenAPI\Client\Model\CreditNoteResponsePayloadEntity',
        'entity_user_id' => 'string',
        'counterpart_id' => 'string',
        'counterpart_tax_id' => 'string',
        'counterpart_type' => '\OpenAPI\Client\Model\CounterpartType',
        'counterpart_address' => '\OpenAPI\Client\Model\CounterpartAddress',
        'counterpart_contact' => '\OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartContact',
        'counterpart_name' => 'string',
        'file_url' => 'string',
        'file' => '\OpenAPI\Client\Model\FileSchema',
        'commercial_condition_description' => 'string',
        'total_amount' => 'int',
        'total_vat_amount' => 'int',
        'entity_bank_account' => '\OpenAPI\Client\Model\EntityBankAccountRequest',
        'vat_exempt' => 'bool',
        'vat_exemption_rationale' => 'string',
        'based_on' => 'string',
        'based_on_document_id' => 'string',
        'memo' => 'string',
        'issue_date' => '\DateTime',
        'counterpart_shipping_address' => '\OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartShippingAddress',
        'counterpart_billing_address' => '\OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartBillingAddress',
        'counterpart_business_type' => 'string',
        'discount' => '\OpenAPI\Client\Model\CreditNoteResponsePayloadDiscount',
        'discounted_subtotal' => 'int',
        'total_vat_amounts' => '\OpenAPI\Client\Model\TotalVatAmountItem[]',
        'type' => 'string',
        'status' => '\OpenAPI\Client\Model\CreditNoteStateEnum',
        'purchase_order' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'document_id' => null,
        'currency' => null,
        'subtotal' => null,
        'line_items' => null,
        'entity_address' => null,
        'entity' => null,
        'entity_user_id' => 'uuid',
        'counterpart_id' => 'uuid',
        'counterpart_tax_id' => null,
        'counterpart_type' => null,
        'counterpart_address' => null,
        'counterpart_contact' => null,
        'counterpart_name' => null,
        'file_url' => null,
        'file' => null,
        'commercial_condition_description' => null,
        'total_amount' => null,
        'total_vat_amount' => null,
        'entity_bank_account' => null,
        'vat_exempt' => null,
        'vat_exemption_rationale' => null,
        'based_on' => 'uuid',
        'based_on_document_id' => null,
        'memo' => null,
        'issue_date' => 'date-time',
        'counterpart_shipping_address' => null,
        'counterpart_billing_address' => null,
        'counterpart_business_type' => null,
        'discount' => null,
        'discounted_subtotal' => null,
        'total_vat_amounts' => null,
        'type' => null,
        'status' => null,
        'purchase_order' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'created_at' => false,
		'updated_at' => false,
		'document_id' => false,
		'currency' => false,
		'subtotal' => false,
		'line_items' => false,
		'entity_address' => false,
		'entity' => false,
		'entity_user_id' => false,
		'counterpart_id' => false,
		'counterpart_tax_id' => false,
		'counterpart_type' => false,
		'counterpart_address' => false,
		'counterpart_contact' => false,
		'counterpart_name' => false,
		'file_url' => false,
		'file' => false,
		'commercial_condition_description' => false,
		'total_amount' => false,
		'total_vat_amount' => false,
		'entity_bank_account' => false,
		'vat_exempt' => false,
		'vat_exemption_rationale' => false,
		'based_on' => false,
		'based_on_document_id' => false,
		'memo' => false,
		'issue_date' => false,
		'counterpart_shipping_address' => false,
		'counterpart_billing_address' => false,
		'counterpart_business_type' => false,
		'discount' => false,
		'discounted_subtotal' => false,
		'total_vat_amounts' => false,
		'type' => false,
		'status' => false,
		'purchase_order' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'document_id' => 'document_id',
        'currency' => 'currency',
        'subtotal' => 'subtotal',
        'line_items' => 'line_items',
        'entity_address' => 'entity_address',
        'entity' => 'entity',
        'entity_user_id' => 'entity_user_id',
        'counterpart_id' => 'counterpart_id',
        'counterpart_tax_id' => 'counterpart_tax_id',
        'counterpart_type' => 'counterpart_type',
        'counterpart_address' => 'counterpart_address',
        'counterpart_contact' => 'counterpart_contact',
        'counterpart_name' => 'counterpart_name',
        'file_url' => 'file_url',
        'file' => 'file',
        'commercial_condition_description' => 'commercial_condition_description',
        'total_amount' => 'total_amount',
        'total_vat_amount' => 'total_vat_amount',
        'entity_bank_account' => 'entity_bank_account',
        'vat_exempt' => 'vat_exempt',
        'vat_exemption_rationale' => 'vat_exemption_rationale',
        'based_on' => 'based_on',
        'based_on_document_id' => 'based_on_document_id',
        'memo' => 'memo',
        'issue_date' => 'issue_date',
        'counterpart_shipping_address' => 'counterpart_shipping_address',
        'counterpart_billing_address' => 'counterpart_billing_address',
        'counterpart_business_type' => 'counterpart_business_type',
        'discount' => 'discount',
        'discounted_subtotal' => 'discounted_subtotal',
        'total_vat_amounts' => 'total_vat_amounts',
        'type' => 'type',
        'status' => 'status',
        'purchase_order' => 'purchase_order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'document_id' => 'setDocumentId',
        'currency' => 'setCurrency',
        'subtotal' => 'setSubtotal',
        'line_items' => 'setLineItems',
        'entity_address' => 'setEntityAddress',
        'entity' => 'setEntity',
        'entity_user_id' => 'setEntityUserId',
        'counterpart_id' => 'setCounterpartId',
        'counterpart_tax_id' => 'setCounterpartTaxId',
        'counterpart_type' => 'setCounterpartType',
        'counterpart_address' => 'setCounterpartAddress',
        'counterpart_contact' => 'setCounterpartContact',
        'counterpart_name' => 'setCounterpartName',
        'file_url' => 'setFileUrl',
        'file' => 'setFile',
        'commercial_condition_description' => 'setCommercialConditionDescription',
        'total_amount' => 'setTotalAmount',
        'total_vat_amount' => 'setTotalVatAmount',
        'entity_bank_account' => 'setEntityBankAccount',
        'vat_exempt' => 'setVatExempt',
        'vat_exemption_rationale' => 'setVatExemptionRationale',
        'based_on' => 'setBasedOn',
        'based_on_document_id' => 'setBasedOnDocumentId',
        'memo' => 'setMemo',
        'issue_date' => 'setIssueDate',
        'counterpart_shipping_address' => 'setCounterpartShippingAddress',
        'counterpart_billing_address' => 'setCounterpartBillingAddress',
        'counterpart_business_type' => 'setCounterpartBusinessType',
        'discount' => 'setDiscount',
        'discounted_subtotal' => 'setDiscountedSubtotal',
        'total_vat_amounts' => 'setTotalVatAmounts',
        'type' => 'setType',
        'status' => 'setStatus',
        'purchase_order' => 'setPurchaseOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'document_id' => 'getDocumentId',
        'currency' => 'getCurrency',
        'subtotal' => 'getSubtotal',
        'line_items' => 'getLineItems',
        'entity_address' => 'getEntityAddress',
        'entity' => 'getEntity',
        'entity_user_id' => 'getEntityUserId',
        'counterpart_id' => 'getCounterpartId',
        'counterpart_tax_id' => 'getCounterpartTaxId',
        'counterpart_type' => 'getCounterpartType',
        'counterpart_address' => 'getCounterpartAddress',
        'counterpart_contact' => 'getCounterpartContact',
        'counterpart_name' => 'getCounterpartName',
        'file_url' => 'getFileUrl',
        'file' => 'getFile',
        'commercial_condition_description' => 'getCommercialConditionDescription',
        'total_amount' => 'getTotalAmount',
        'total_vat_amount' => 'getTotalVatAmount',
        'entity_bank_account' => 'getEntityBankAccount',
        'vat_exempt' => 'getVatExempt',
        'vat_exemption_rationale' => 'getVatExemptionRationale',
        'based_on' => 'getBasedOn',
        'based_on_document_id' => 'getBasedOnDocumentId',
        'memo' => 'getMemo',
        'issue_date' => 'getIssueDate',
        'counterpart_shipping_address' => 'getCounterpartShippingAddress',
        'counterpart_billing_address' => 'getCounterpartBillingAddress',
        'counterpart_business_type' => 'getCounterpartBusinessType',
        'discount' => 'getDiscount',
        'discounted_subtotal' => 'getDiscountedSubtotal',
        'total_vat_amounts' => 'getTotalVatAmounts',
        'type' => 'getType',
        'status' => 'getStatus',
        'purchase_order' => 'getPurchaseOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CREDIT_NOTE = 'credit_note';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREDIT_NOTE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('entity_address', $data ?? [], null);
        $this->setIfExists('entity', $data ?? [], null);
        $this->setIfExists('entity_user_id', $data ?? [], null);
        $this->setIfExists('counterpart_id', $data ?? [], null);
        $this->setIfExists('counterpart_tax_id', $data ?? [], null);
        $this->setIfExists('counterpart_type', $data ?? [], null);
        $this->setIfExists('counterpart_address', $data ?? [], null);
        $this->setIfExists('counterpart_contact', $data ?? [], null);
        $this->setIfExists('counterpart_name', $data ?? [], null);
        $this->setIfExists('file_url', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('commercial_condition_description', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], 0);
        $this->setIfExists('total_vat_amount', $data ?? [], null);
        $this->setIfExists('entity_bank_account', $data ?? [], null);
        $this->setIfExists('vat_exempt', $data ?? [], null);
        $this->setIfExists('vat_exemption_rationale', $data ?? [], null);
        $this->setIfExists('based_on', $data ?? [], null);
        $this->setIfExists('based_on_document_id', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('issue_date', $data ?? [], null);
        $this->setIfExists('counterpart_shipping_address', $data ?? [], null);
        $this->setIfExists('counterpart_billing_address', $data ?? [], null);
        $this->setIfExists('counterpart_business_type', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('discounted_subtotal', $data ?? [], null);
        $this->setIfExists('total_vat_amounts', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('purchase_order', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['line_items'] === null) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if ($this->container['entity_address'] === null) {
            $invalidProperties[] = "'entity_address' can't be null";
        }
        if ($this->container['entity'] === null) {
            $invalidProperties[] = "'entity' can't be null";
        }
        if ($this->container['counterpart_id'] === null) {
            $invalidProperties[] = "'counterpart_id' can't be null";
        }
        if ($this->container['counterpart_type'] === null) {
            $invalidProperties[] = "'counterpart_type' can't be null";
        }
        if ($this->container['counterpart_address'] === null) {
            $invalidProperties[] = "'counterpart_address' can't be null";
        }
        if ($this->container['total_vat_amount'] === null) {
            $invalidProperties[] = "'total_vat_amount' can't be null";
        }
        if (!is_null($this->container['counterpart_business_type']) && (mb_strlen($this->container['counterpart_business_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'counterpart_business_type', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if (!is_null($this->container['purchase_order']) && (mb_strlen($this->container['purchase_order']) > 100)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id The sequential code systematically assigned to invoices.
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            throw new \InvalidArgumentException('non-nullable document_id cannot be null');
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\CurrencyEnum
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\CurrencyEnum $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return int|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int|null $subtotal The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units).
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \OpenAPI\Client\Model\ResponseItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \OpenAPI\Client\Model\ResponseItem[] $line_items line_items
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets entity_address
     *
     * @return \OpenAPI\Client\Model\EntityAddressSchema
     */
    public function getEntityAddress()
    {
        return $this->container['entity_address'];
    }

    /**
     * Sets entity_address
     *
     * @param \OpenAPI\Client\Model\EntityAddressSchema $entity_address entity_address
     *
     * @return self
     */
    public function setEntityAddress($entity_address)
    {
        if (is_null($entity_address)) {
            throw new \InvalidArgumentException('non-nullable entity_address cannot be null');
        }
        $this->container['entity_address'] = $entity_address;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return \OpenAPI\Client\Model\CreditNoteResponsePayloadEntity
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param \OpenAPI\Client\Model\CreditNoteResponsePayloadEntity $entity entity
     *
     * @return self
     */
    public function setEntity($entity)
    {
        if (is_null($entity)) {
            throw new \InvalidArgumentException('non-nullable entity cannot be null');
        }
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets entity_user_id
     *
     * @return string|null
     */
    public function getEntityUserId()
    {
        return $this->container['entity_user_id'];
    }

    /**
     * Sets entity_user_id
     *
     * @param string|null $entity_user_id The entity user who created this document.
     *
     * @return self
     */
    public function setEntityUserId($entity_user_id)
    {
        if (is_null($entity_user_id)) {
            throw new \InvalidArgumentException('non-nullable entity_user_id cannot be null');
        }
        $this->container['entity_user_id'] = $entity_user_id;

        return $this;
    }

    /**
     * Gets counterpart_id
     *
     * @return string
     */
    public function getCounterpartId()
    {
        return $this->container['counterpart_id'];
    }

    /**
     * Sets counterpart_id
     *
     * @param string $counterpart_id Unique ID of the counterpart.
     *
     * @return self
     */
    public function setCounterpartId($counterpart_id)
    {
        if (is_null($counterpart_id)) {
            throw new \InvalidArgumentException('non-nullable counterpart_id cannot be null');
        }
        $this->container['counterpart_id'] = $counterpart_id;

        return $this;
    }

    /**
     * Gets counterpart_tax_id
     *
     * @return string|null
     */
    public function getCounterpartTaxId()
    {
        return $this->container['counterpart_tax_id'];
    }

    /**
     * Sets counterpart_tax_id
     *
     * @param string|null $counterpart_tax_id The VAT/TAX ID of the counterpart.
     *
     * @return self
     */
    public function setCounterpartTaxId($counterpart_tax_id)
    {
        if (is_null($counterpart_tax_id)) {
            throw new \InvalidArgumentException('non-nullable counterpart_tax_id cannot be null');
        }
        $this->container['counterpart_tax_id'] = $counterpart_tax_id;

        return $this;
    }

    /**
     * Gets counterpart_type
     *
     * @return \OpenAPI\Client\Model\CounterpartType
     */
    public function getCounterpartType()
    {
        return $this->container['counterpart_type'];
    }

    /**
     * Sets counterpart_type
     *
     * @param \OpenAPI\Client\Model\CounterpartType $counterpart_type counterpart_type
     *
     * @return self
     */
    public function setCounterpartType($counterpart_type)
    {
        if (is_null($counterpart_type)) {
            throw new \InvalidArgumentException('non-nullable counterpart_type cannot be null');
        }
        $this->container['counterpart_type'] = $counterpart_type;

        return $this;
    }

    /**
     * Gets counterpart_address
     *
     * @return \OpenAPI\Client\Model\CounterpartAddress
     */
    public function getCounterpartAddress()
    {
        return $this->container['counterpart_address'];
    }

    /**
     * Sets counterpart_address
     *
     * @param \OpenAPI\Client\Model\CounterpartAddress $counterpart_address counterpart_address
     *
     * @return self
     */
    public function setCounterpartAddress($counterpart_address)
    {
        if (is_null($counterpart_address)) {
            throw new \InvalidArgumentException('non-nullable counterpart_address cannot be null');
        }
        $this->container['counterpart_address'] = $counterpart_address;

        return $this;
    }

    /**
     * Gets counterpart_contact
     *
     * @return \OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartContact|null
     */
    public function getCounterpartContact()
    {
        return $this->container['counterpart_contact'];
    }

    /**
     * Sets counterpart_contact
     *
     * @param \OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartContact|null $counterpart_contact counterpart_contact
     *
     * @return self
     */
    public function setCounterpartContact($counterpart_contact)
    {
        if (is_null($counterpart_contact)) {
            throw new \InvalidArgumentException('non-nullable counterpart_contact cannot be null');
        }
        $this->container['counterpart_contact'] = $counterpart_contact;

        return $this;
    }

    /**
     * Gets counterpart_name
     *
     * @return string|null
     */
    public function getCounterpartName()
    {
        return $this->container['counterpart_name'];
    }

    /**
     * Sets counterpart_name
     *
     * @param string|null $counterpart_name A legal name of a counterpart it is an organization
     *
     * @return self
     */
    public function setCounterpartName($counterpart_name)
    {
        if (is_null($counterpart_name)) {
            throw new \InvalidArgumentException('non-nullable counterpart_name cannot be null');
        }
        $this->container['counterpart_name'] = $counterpart_name;

        return $this;
    }

    /**
     * Gets file_url
     *
     * @return string|null
     */
    public function getFileUrl()
    {
        return $this->container['file_url'];
    }

    /**
     * Sets file_url
     *
     * @param string|null $file_url file_url
     *
     * @return self
     */
    public function setFileUrl($file_url)
    {
        if (is_null($file_url)) {
            throw new \InvalidArgumentException('non-nullable file_url cannot be null');
        }
        $this->container['file_url'] = $file_url;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \OpenAPI\Client\Model\FileSchema|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \OpenAPI\Client\Model\FileSchema|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            throw new \InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets commercial_condition_description
     *
     * @return string|null
     */
    public function getCommercialConditionDescription()
    {
        return $this->container['commercial_condition_description'];
    }

    /**
     * Sets commercial_condition_description
     *
     * @param string|null $commercial_condition_description The commercial terms of the receivable (e.g. The products must be delivered in X days).
     *
     * @return self
     */
    public function setCommercialConditionDescription($commercial_condition_description)
    {
        if (is_null($commercial_condition_description)) {
            throw new \InvalidArgumentException('non-nullable commercial_condition_description cannot be null');
        }
        $this->container['commercial_condition_description'] = $commercial_condition_description;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return int|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int|null $total_amount Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_vat_amount
     *
     * @return int
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     *
     * @param int $total_vat_amount The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units).
     *
     * @return self
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        if (is_null($total_vat_amount)) {
            throw new \InvalidArgumentException('non-nullable total_vat_amount cannot be null');
        }
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets entity_bank_account
     *
     * @return \OpenAPI\Client\Model\EntityBankAccountRequest|null
     */
    public function getEntityBankAccount()
    {
        return $this->container['entity_bank_account'];
    }

    /**
     * Sets entity_bank_account
     *
     * @param \OpenAPI\Client\Model\EntityBankAccountRequest|null $entity_bank_account entity_bank_account
     *
     * @return self
     */
    public function setEntityBankAccount($entity_bank_account)
    {
        if (is_null($entity_bank_account)) {
            throw new \InvalidArgumentException('non-nullable entity_bank_account cannot be null');
        }
        $this->container['entity_bank_account'] = $entity_bank_account;

        return $this;
    }

    /**
     * Gets vat_exempt
     *
     * @return bool|null
     */
    public function getVatExempt()
    {
        return $this->container['vat_exempt'];
    }

    /**
     * Sets vat_exempt
     *
     * @param bool|null $vat_exempt Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
     *
     * @return self
     */
    public function setVatExempt($vat_exempt)
    {
        if (is_null($vat_exempt)) {
            throw new \InvalidArgumentException('non-nullable vat_exempt cannot be null');
        }
        $this->container['vat_exempt'] = $vat_exempt;

        return $this;
    }

    /**
     * Gets vat_exemption_rationale
     *
     * @return string|null
     */
    public function getVatExemptionRationale()
    {
        return $this->container['vat_exemption_rationale'];
    }

    /**
     * Sets vat_exemption_rationale
     *
     * @param string|null $vat_exemption_rationale The reason for the VAT exemption, if applicable.
     *
     * @return self
     */
    public function setVatExemptionRationale($vat_exemption_rationale)
    {
        if (is_null($vat_exemption_rationale)) {
            throw new \InvalidArgumentException('non-nullable vat_exemption_rationale cannot be null');
        }
        $this->container['vat_exemption_rationale'] = $vat_exemption_rationale;

        return $this;
    }

    /**
     * Gets based_on
     *
     * @return string|null
     */
    public function getBasedOn()
    {
        return $this->container['based_on'];
    }

    /**
     * Sets based_on
     *
     * @param string|null $based_on The unique ID of a previous document related to the receivable if applicable.
     *
     * @return self
     */
    public function setBasedOn($based_on)
    {
        if (is_null($based_on)) {
            throw new \InvalidArgumentException('non-nullable based_on cannot be null');
        }
        $this->container['based_on'] = $based_on;

        return $this;
    }

    /**
     * Gets based_on_document_id
     *
     * @return string|null
     */
    public function getBasedOnDocumentId()
    {
        return $this->container['based_on_document_id'];
    }

    /**
     * Sets based_on_document_id
     *
     * @param string|null $based_on_document_id The unique document ID of a previous document related to the receivable if applicable.
     *
     * @return self
     */
    public function setBasedOnDocumentId($based_on_document_id)
    {
        if (is_null($based_on_document_id)) {
            throw new \InvalidArgumentException('non-nullable based_on_document_id cannot be null');
        }
        $this->container['based_on_document_id'] = $based_on_document_id;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo A note with additional information for a receivable.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime|null $issue_date Optional field for the issue of the entry.
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {
        if (is_null($issue_date)) {
            throw new \InvalidArgumentException('non-nullable issue_date cannot be null');
        }
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets counterpart_shipping_address
     *
     * @return \OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartShippingAddress|null
     */
    public function getCounterpartShippingAddress()
    {
        return $this->container['counterpart_shipping_address'];
    }

    /**
     * Sets counterpart_shipping_address
     *
     * @param \OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartShippingAddress|null $counterpart_shipping_address counterpart_shipping_address
     *
     * @return self
     */
    public function setCounterpartShippingAddress($counterpart_shipping_address)
    {
        if (is_null($counterpart_shipping_address)) {
            throw new \InvalidArgumentException('non-nullable counterpart_shipping_address cannot be null');
        }
        $this->container['counterpart_shipping_address'] = $counterpart_shipping_address;

        return $this;
    }

    /**
     * Gets counterpart_billing_address
     *
     * @return \OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartBillingAddress|null
     */
    public function getCounterpartBillingAddress()
    {
        return $this->container['counterpart_billing_address'];
    }

    /**
     * Sets counterpart_billing_address
     *
     * @param \OpenAPI\Client\Model\CreditNoteResponsePayloadCounterpartBillingAddress|null $counterpart_billing_address counterpart_billing_address
     *
     * @return self
     */
    public function setCounterpartBillingAddress($counterpart_billing_address)
    {
        if (is_null($counterpart_billing_address)) {
            throw new \InvalidArgumentException('non-nullable counterpart_billing_address cannot be null');
        }
        $this->container['counterpart_billing_address'] = $counterpart_billing_address;

        return $this;
    }

    /**
     * Gets counterpart_business_type
     *
     * @return string|null
     */
    public function getCounterpartBusinessType()
    {
        return $this->container['counterpart_business_type'];
    }

    /**
     * Sets counterpart_business_type
     *
     * @param string|null $counterpart_business_type Different types of companies for different countries, ex. GmbH, SAS, SNC, etc.
     *
     * @return self
     */
    public function setCounterpartBusinessType($counterpart_business_type)
    {
        if (is_null($counterpart_business_type)) {
            throw new \InvalidArgumentException('non-nullable counterpart_business_type cannot be null');
        }
        if ((mb_strlen($counterpart_business_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $counterpart_business_type when calling CreditNoteResponsePayload., must be smaller than or equal to 50.');
        }

        $this->container['counterpart_business_type'] = $counterpart_business_type;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \OpenAPI\Client\Model\CreditNoteResponsePayloadDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \OpenAPI\Client\Model\CreditNoteResponsePayloadDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discounted_subtotal
     *
     * @return int|null
     */
    public function getDiscountedSubtotal()
    {
        return $this->container['discounted_subtotal'];
    }

    /**
     * Sets discounted_subtotal
     *
     * @param int|null $discounted_subtotal Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units).
     *
     * @return self
     */
    public function setDiscountedSubtotal($discounted_subtotal)
    {
        if (is_null($discounted_subtotal)) {
            throw new \InvalidArgumentException('non-nullable discounted_subtotal cannot be null');
        }
        $this->container['discounted_subtotal'] = $discounted_subtotal;

        return $this;
    }

    /**
     * Gets total_vat_amounts
     *
     * @return \OpenAPI\Client\Model\TotalVatAmountItem[]|null
     */
    public function getTotalVatAmounts()
    {
        return $this->container['total_vat_amounts'];
    }

    /**
     * Sets total_vat_amounts
     *
     * @param \OpenAPI\Client\Model\TotalVatAmountItem[]|null $total_vat_amounts List of total vat amount for each VAT, presented in receivable
     *
     * @return self
     */
    public function setTotalVatAmounts($total_vat_amounts)
    {
        if (is_null($total_vat_amounts)) {
            throw new \InvalidArgumentException('non-nullable total_vat_amounts cannot be null');
        }
        $this->container['total_vat_amounts'] = $total_vat_amounts;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the receivable
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\CreditNoteStateEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\CreditNoteStateEnum $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets purchase_order
     *
     * @return string|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string|null $purchase_order Contain purchase order number.
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 100)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling CreditNoteResponsePayload., must be smaller than or equal to 100.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


