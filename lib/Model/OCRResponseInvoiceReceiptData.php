<?php
/**
 * OCRResponseInvoiceReceiptData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Monite Partner API
 *
 * The Monite REST API, for Monite partners to integrate with our solution.
 *
 * The version of the OpenAPI document: 2023-03-14
 * Contact: developers@monite.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OCRResponseInvoiceReceiptData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OCRResponseInvoiceReceiptData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OCRResponseInvoiceReceiptData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total' => 'int',
        'currency' => 'string',
        'counterpart_name' => 'string',
        'counterpart_address' => 'string',
        'counterpart_account_id' => 'string',
        'document_id' => 'string',
        'payment_terms' => 'string',
        'tax_payer_id' => 'string',
        'document_issued_at_date' => 'string',
        'document_due_date' => 'string',
        'counterpart_address_object' => '\OpenAPI\Client\Model\OCRResponseInvoiceReceiptDataCounterpartAddressObject',
        'line_items' => '\OpenAPI\Client\Model\OCRResponseInvoiceReceiptLineItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total' => null,
        'currency' => null,
        'counterpart_name' => null,
        'counterpart_address' => null,
        'counterpart_account_id' => null,
        'document_id' => null,
        'payment_terms' => null,
        'tax_payer_id' => null,
        'document_issued_at_date' => null,
        'document_due_date' => null,
        'counterpart_address_object' => null,
        'line_items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total' => false,
		'currency' => false,
		'counterpart_name' => false,
		'counterpart_address' => false,
		'counterpart_account_id' => false,
		'document_id' => false,
		'payment_terms' => false,
		'tax_payer_id' => false,
		'document_issued_at_date' => false,
		'document_due_date' => false,
		'counterpart_address_object' => false,
		'line_items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'currency' => 'currency',
        'counterpart_name' => 'counterpart_name',
        'counterpart_address' => 'counterpart_address',
        'counterpart_account_id' => 'counterpart_account_id',
        'document_id' => 'document_id',
        'payment_terms' => 'payment_terms',
        'tax_payer_id' => 'tax_payer_id',
        'document_issued_at_date' => 'document_issued_at_date',
        'document_due_date' => 'document_due_date',
        'counterpart_address_object' => 'counterpart_address_object',
        'line_items' => 'line_items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'currency' => 'setCurrency',
        'counterpart_name' => 'setCounterpartName',
        'counterpart_address' => 'setCounterpartAddress',
        'counterpart_account_id' => 'setCounterpartAccountId',
        'document_id' => 'setDocumentId',
        'payment_terms' => 'setPaymentTerms',
        'tax_payer_id' => 'setTaxPayerId',
        'document_issued_at_date' => 'setDocumentIssuedAtDate',
        'document_due_date' => 'setDocumentDueDate',
        'counterpart_address_object' => 'setCounterpartAddressObject',
        'line_items' => 'setLineItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'currency' => 'getCurrency',
        'counterpart_name' => 'getCounterpartName',
        'counterpart_address' => 'getCounterpartAddress',
        'counterpart_account_id' => 'getCounterpartAccountId',
        'document_id' => 'getDocumentId',
        'payment_terms' => 'getPaymentTerms',
        'tax_payer_id' => 'getTaxPayerId',
        'document_issued_at_date' => 'getDocumentIssuedAtDate',
        'document_due_date' => 'getDocumentDueDate',
        'counterpart_address_object' => 'getCounterpartAddressObject',
        'line_items' => 'getLineItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('counterpart_name', $data ?? [], null);
        $this->setIfExists('counterpart_address', $data ?? [], null);
        $this->setIfExists('counterpart_account_id', $data ?? [], null);
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('tax_payer_id', $data ?? [], null);
        $this->setIfExists('document_issued_at_date', $data ?? [], null);
        $this->setIfExists('document_due_date', $data ?? [], null);
        $this->setIfExists('counterpart_address_object', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total Total in cents/eurocents
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency ISO 4217 currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets counterpart_name
     *
     * @return string|null
     */
    public function getCounterpartName()
    {
        return $this->container['counterpart_name'];
    }

    /**
     * Sets counterpart_name
     *
     * @param string|null $counterpart_name Counterpart name
     *
     * @return self
     */
    public function setCounterpartName($counterpart_name)
    {
        if (is_null($counterpart_name)) {
            throw new \InvalidArgumentException('non-nullable counterpart_name cannot be null');
        }
        $this->container['counterpart_name'] = $counterpart_name;

        return $this;
    }

    /**
     * Gets counterpart_address
     *
     * @return string|null
     */
    public function getCounterpartAddress()
    {
        return $this->container['counterpart_address'];
    }

    /**
     * Sets counterpart_address
     *
     * @param string|null $counterpart_address Counterpart address
     *
     * @return self
     */
    public function setCounterpartAddress($counterpart_address)
    {
        if (is_null($counterpart_address)) {
            throw new \InvalidArgumentException('non-nullable counterpart_address cannot be null');
        }
        $this->container['counterpart_address'] = $counterpart_address;

        return $this;
    }

    /**
     * Gets counterpart_account_id
     *
     * @return string|null
     */
    public function getCounterpartAccountId()
    {
        return $this->container['counterpart_account_id'];
    }

    /**
     * Sets counterpart_account_id
     *
     * @param string|null $counterpart_account_id Counterpart bank ID
     *
     * @return self
     */
    public function setCounterpartAccountId($counterpart_account_id)
    {
        if (is_null($counterpart_account_id)) {
            throw new \InvalidArgumentException('non-nullable counterpart_account_id cannot be null');
        }
        $this->container['counterpart_account_id'] = $counterpart_account_id;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id Invoice/receipt ID
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            throw new \InvalidArgumentException('non-nullable document_id cannot be null');
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string|null $payment_terms Payment terms
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            throw new \InvalidArgumentException('non-nullable payment_terms cannot be null');
        }
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets tax_payer_id
     *
     * @return string|null
     */
    public function getTaxPayerId()
    {
        return $this->container['tax_payer_id'];
    }

    /**
     * Sets tax_payer_id
     *
     * @param string|null $tax_payer_id Tax payer ID (aka VAT ID)
     *
     * @return self
     */
    public function setTaxPayerId($tax_payer_id)
    {
        if (is_null($tax_payer_id)) {
            throw new \InvalidArgumentException('non-nullable tax_payer_id cannot be null');
        }
        $this->container['tax_payer_id'] = $tax_payer_id;

        return $this;
    }

    /**
     * Gets document_issued_at_date
     *
     * @return string|null
     */
    public function getDocumentIssuedAtDate()
    {
        return $this->container['document_issued_at_date'];
    }

    /**
     * Sets document_issued_at_date
     *
     * @param string|null $document_issued_at_date Document issuance date in ISO format
     *
     * @return self
     */
    public function setDocumentIssuedAtDate($document_issued_at_date)
    {
        if (is_null($document_issued_at_date)) {
            throw new \InvalidArgumentException('non-nullable document_issued_at_date cannot be null');
        }
        $this->container['document_issued_at_date'] = $document_issued_at_date;

        return $this;
    }

    /**
     * Gets document_due_date
     *
     * @return string|null
     */
    public function getDocumentDueDate()
    {
        return $this->container['document_due_date'];
    }

    /**
     * Sets document_due_date
     *
     * @param string|null $document_due_date Document due date in ISO format
     *
     * @return self
     */
    public function setDocumentDueDate($document_due_date)
    {
        if (is_null($document_due_date)) {
            throw new \InvalidArgumentException('non-nullable document_due_date cannot be null');
        }
        $this->container['document_due_date'] = $document_due_date;

        return $this;
    }

    /**
     * Gets counterpart_address_object
     *
     * @return \OpenAPI\Client\Model\OCRResponseInvoiceReceiptDataCounterpartAddressObject|null
     */
    public function getCounterpartAddressObject()
    {
        return $this->container['counterpart_address_object'];
    }

    /**
     * Sets counterpart_address_object
     *
     * @param \OpenAPI\Client\Model\OCRResponseInvoiceReceiptDataCounterpartAddressObject|null $counterpart_address_object counterpart_address_object
     *
     * @return self
     */
    public function setCounterpartAddressObject($counterpart_address_object)
    {
        if (is_null($counterpart_address_object)) {
            throw new \InvalidArgumentException('non-nullable counterpart_address_object cannot be null');
        }
        $this->container['counterpart_address_object'] = $counterpart_address_object;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \OpenAPI\Client\Model\OCRResponseInvoiceReceiptLineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \OpenAPI\Client\Model\OCRResponseInvoiceReceiptLineItem[]|null $line_items List of line items from documen
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


