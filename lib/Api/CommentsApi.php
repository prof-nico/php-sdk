<?php
/**
 * CommentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Monite Partner API
 *
 * The Monite REST API, for Monite partners to integrate with our solution.
 *
 * The version of the OpenAPI document: 2023-03-14
 * Contact: developers@monite.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CommentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewCommentV1CommentsObjectTypeObjectIdPost' => [
            'application/json',
        ],
        'getCommentByIdV1CommentsCommentIdGet' => [
            'application/json',
        ],
        'getCommentsV1CommentsObjectTypeObjectIdGet' => [
            'application/json',
        ],
        'updateCommentByIdV1CommentsCommentIdPatch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewCommentV1CommentsObjectTypeObjectIdPost
     *
     * Create New Comment
     *
     * @param  \DateTime $x_monite_version x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type object_type (required)
     * @param  string $object_id object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse
     */
    public function createNewCommentV1CommentsObjectTypeObjectIdPost($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'][0])
    {
        list($response) = $this->createNewCommentV1CommentsObjectTypeObjectIdPostWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, $contentType);
        return $response;
    }

    /**
     * Operation createNewCommentV1CommentsObjectTypeObjectIdPostWithHttpInfo
     *
     * Create New Comment
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewCommentV1CommentsObjectTypeObjectIdPostWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'][0])
    {
        $request = $this->createNewCommentV1CommentsObjectTypeObjectIdPostRequest($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CommentSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CommentSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CommentSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CommentSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CommentSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewCommentV1CommentsObjectTypeObjectIdPostAsync
     *
     * Create New Comment
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewCommentV1CommentsObjectTypeObjectIdPostAsync($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'][0])
    {
        return $this->createNewCommentV1CommentsObjectTypeObjectIdPostAsyncWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewCommentV1CommentsObjectTypeObjectIdPostAsyncWithHttpInfo
     *
     * Create New Comment
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewCommentV1CommentsObjectTypeObjectIdPostAsyncWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CommentSchema';
        $request = $this->createNewCommentV1CommentsObjectTypeObjectIdPostRequest($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewCommentV1CommentsObjectTypeObjectIdPost'
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewCommentV1CommentsObjectTypeObjectIdPostRequest($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['createNewCommentV1CommentsObjectTypeObjectIdPost'][0])
    {

        // verify the required parameter 'x_monite_version' is set
        if ($x_monite_version === null || (is_array($x_monite_version) && count($x_monite_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_version when calling createNewCommentV1CommentsObjectTypeObjectIdPost'
            );
        }

        // verify the required parameter 'object_type' is set
        if ($object_type === null || (is_array($object_type) && count($object_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object_type when calling createNewCommentV1CommentsObjectTypeObjectIdPost'
            );
        }

        // verify the required parameter 'object_id' is set
        if ($object_id === null || (is_array($object_id) && count($object_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object_id when calling createNewCommentV1CommentsObjectTypeObjectIdPost'
            );
        }

        // verify the required parameter 'x_monite_entity_id' is set
        if ($x_monite_entity_id === null || (is_array($x_monite_entity_id) && count($x_monite_entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_entity_id when calling createNewCommentV1CommentsObjectTypeObjectIdPost'
            );
        }

        // verify the required parameter 'create_update_comment_schema' is set
        if ($create_update_comment_schema === null || (is_array($create_update_comment_schema) && count($create_update_comment_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_update_comment_schema when calling createNewCommentV1CommentsObjectTypeObjectIdPost'
            );
        }


        $resourcePath = '/comments/{object_type}/{object_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_monite_version !== null) {
            $headerParams['x-monite-version'] = ObjectSerializer::toHeaderValue($x_monite_version);
        }
        // header params
        if ($x_monite_entity_id !== null) {
            $headerParams['x-monite-entity-id'] = ObjectSerializer::toHeaderValue($x_monite_entity_id);
        }

        // path params
        if ($object_type !== null) {
            $resourcePath = str_replace(
                '{' . 'object_type' . '}',
                ObjectSerializer::toPathValue($object_type),
                $resourcePath
            );
        }
        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                '{' . 'object_id' . '}',
                ObjectSerializer::toPathValue($object_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_update_comment_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_update_comment_schema));
            } else {
                $httpBody = $create_update_comment_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommentByIdV1CommentsCommentIdGet
     *
     * Get Comment By Id
     *
     * @param  \DateTime $x_monite_version x_monite_version (required)
     * @param  string $comment_id comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentByIdV1CommentsCommentIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse
     */
    public function getCommentByIdV1CommentsCommentIdGet($x_monite_version, $comment_id, $x_monite_entity_id, string $contentType = self::contentTypes['getCommentByIdV1CommentsCommentIdGet'][0])
    {
        list($response) = $this->getCommentByIdV1CommentsCommentIdGetWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation getCommentByIdV1CommentsCommentIdGetWithHttpInfo
     *
     * Get Comment By Id
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentByIdV1CommentsCommentIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentByIdV1CommentsCommentIdGetWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, string $contentType = self::contentTypes['getCommentByIdV1CommentsCommentIdGet'][0])
    {
        $request = $this->getCommentByIdV1CommentsCommentIdGetRequest($x_monite_version, $comment_id, $x_monite_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CommentSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CommentSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CommentSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CommentSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CommentSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommentByIdV1CommentsCommentIdGetAsync
     *
     * Get Comment By Id
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentByIdV1CommentsCommentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentByIdV1CommentsCommentIdGetAsync($x_monite_version, $comment_id, $x_monite_entity_id, string $contentType = self::contentTypes['getCommentByIdV1CommentsCommentIdGet'][0])
    {
        return $this->getCommentByIdV1CommentsCommentIdGetAsyncWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommentByIdV1CommentsCommentIdGetAsyncWithHttpInfo
     *
     * Get Comment By Id
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentByIdV1CommentsCommentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentByIdV1CommentsCommentIdGetAsyncWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, string $contentType = self::contentTypes['getCommentByIdV1CommentsCommentIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CommentSchema';
        $request = $this->getCommentByIdV1CommentsCommentIdGetRequest($x_monite_version, $comment_id, $x_monite_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommentByIdV1CommentsCommentIdGet'
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentByIdV1CommentsCommentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommentByIdV1CommentsCommentIdGetRequest($x_monite_version, $comment_id, $x_monite_entity_id, string $contentType = self::contentTypes['getCommentByIdV1CommentsCommentIdGet'][0])
    {

        // verify the required parameter 'x_monite_version' is set
        if ($x_monite_version === null || (is_array($x_monite_version) && count($x_monite_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_version when calling getCommentByIdV1CommentsCommentIdGet'
            );
        }

        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling getCommentByIdV1CommentsCommentIdGet'
            );
        }

        // verify the required parameter 'x_monite_entity_id' is set
        if ($x_monite_entity_id === null || (is_array($x_monite_entity_id) && count($x_monite_entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_entity_id when calling getCommentByIdV1CommentsCommentIdGet'
            );
        }


        $resourcePath = '/comments/{comment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_monite_version !== null) {
            $headerParams['x-monite-version'] = ObjectSerializer::toHeaderValue($x_monite_version);
        }
        // header params
        if ($x_monite_entity_id !== null) {
            $headerParams['x-monite-entity-id'] = ObjectSerializer::toHeaderValue($x_monite_entity_id);
        }

        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'comment_id' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommentsV1CommentsObjectTypeObjectIdGet
     *
     * Get Comments
     *
     * @param  \DateTime $x_monite_version x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type object_type (required)
     * @param  string $object_id object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\OrderEnum3 $order Order by (optional)
     * @param  int $limit Max is 100 (optional, default to 100)
     * @param  string $pagination_token A token, obtained from previous page. Prior over other filters (optional)
     * @param  \OpenAPI\Client\Model\CommentCursorFields $sort Allowed sort fields (optional)
     * @param  \DateTime $created_at__gt created_at__gt (optional)
     * @param  \DateTime $created_at__lt created_at__lt (optional)
     * @param  \DateTime $created_at__gte created_at__gte (optional)
     * @param  \DateTime $created_at__lte created_at__lte (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MultipleCommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse
     */
    public function getCommentsV1CommentsObjectTypeObjectIdGet($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order = null, $limit = 100, $pagination_token = null, $sort = null, $created_at__gt = null, $created_at__lt = null, $created_at__gte = null, $created_at__lte = null, string $contentType = self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'][0])
    {
        list($response) = $this->getCommentsV1CommentsObjectTypeObjectIdGetWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order, $limit, $pagination_token, $sort, $created_at__gt, $created_at__lt, $created_at__gte, $created_at__lte, $contentType);
        return $response;
    }

    /**
     * Operation getCommentsV1CommentsObjectTypeObjectIdGetWithHttpInfo
     *
     * Get Comments
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\OrderEnum3 $order Order by (optional)
     * @param  int $limit Max is 100 (optional, default to 100)
     * @param  string $pagination_token A token, obtained from previous page. Prior over other filters (optional)
     * @param  \OpenAPI\Client\Model\CommentCursorFields $sort Allowed sort fields (optional)
     * @param  \DateTime $created_at__gt (optional)
     * @param  \DateTime $created_at__lt (optional)
     * @param  \DateTime $created_at__gte (optional)
     * @param  \DateTime $created_at__lte (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MultipleCommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentsV1CommentsObjectTypeObjectIdGetWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order = null, $limit = 100, $pagination_token = null, $sort = null, $created_at__gt = null, $created_at__lt = null, $created_at__gte = null, $created_at__lte = null, string $contentType = self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'][0])
    {
        $request = $this->getCommentsV1CommentsObjectTypeObjectIdGetRequest($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order, $limit, $pagination_token, $sort, $created_at__gt, $created_at__lt, $created_at__gte, $created_at__lte, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MultipleCommentSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MultipleCommentSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MultipleCommentSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MultipleCommentSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MultipleCommentSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommentsV1CommentsObjectTypeObjectIdGetAsync
     *
     * Get Comments
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\OrderEnum3 $order Order by (optional)
     * @param  int $limit Max is 100 (optional, default to 100)
     * @param  string $pagination_token A token, obtained from previous page. Prior over other filters (optional)
     * @param  \OpenAPI\Client\Model\CommentCursorFields $sort Allowed sort fields (optional)
     * @param  \DateTime $created_at__gt (optional)
     * @param  \DateTime $created_at__lt (optional)
     * @param  \DateTime $created_at__gte (optional)
     * @param  \DateTime $created_at__lte (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentsV1CommentsObjectTypeObjectIdGetAsync($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order = null, $limit = 100, $pagination_token = null, $sort = null, $created_at__gt = null, $created_at__lt = null, $created_at__gte = null, $created_at__lte = null, string $contentType = self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'][0])
    {
        return $this->getCommentsV1CommentsObjectTypeObjectIdGetAsyncWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order, $limit, $pagination_token, $sort, $created_at__gt, $created_at__lt, $created_at__gte, $created_at__lte, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommentsV1CommentsObjectTypeObjectIdGetAsyncWithHttpInfo
     *
     * Get Comments
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\OrderEnum3 $order Order by (optional)
     * @param  int $limit Max is 100 (optional, default to 100)
     * @param  string $pagination_token A token, obtained from previous page. Prior over other filters (optional)
     * @param  \OpenAPI\Client\Model\CommentCursorFields $sort Allowed sort fields (optional)
     * @param  \DateTime $created_at__gt (optional)
     * @param  \DateTime $created_at__lt (optional)
     * @param  \DateTime $created_at__gte (optional)
     * @param  \DateTime $created_at__lte (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentsV1CommentsObjectTypeObjectIdGetAsyncWithHttpInfo($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order = null, $limit = 100, $pagination_token = null, $sort = null, $created_at__gt = null, $created_at__lt = null, $created_at__gte = null, $created_at__lte = null, string $contentType = self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MultipleCommentSchema';
        $request = $this->getCommentsV1CommentsObjectTypeObjectIdGetRequest($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order, $limit, $pagination_token, $sort, $created_at__gt, $created_at__lt, $created_at__gte, $created_at__lte, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommentsV1CommentsObjectTypeObjectIdGet'
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  ObjectTypeAvailableComment $object_type (required)
     * @param  string $object_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\OrderEnum3 $order Order by (optional)
     * @param  int $limit Max is 100 (optional, default to 100)
     * @param  string $pagination_token A token, obtained from previous page. Prior over other filters (optional)
     * @param  \OpenAPI\Client\Model\CommentCursorFields $sort Allowed sort fields (optional)
     * @param  \DateTime $created_at__gt (optional)
     * @param  \DateTime $created_at__lt (optional)
     * @param  \DateTime $created_at__gte (optional)
     * @param  \DateTime $created_at__lte (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommentsV1CommentsObjectTypeObjectIdGetRequest($x_monite_version, $object_type, $object_id, $x_monite_entity_id, $order = null, $limit = 100, $pagination_token = null, $sort = null, $created_at__gt = null, $created_at__lt = null, $created_at__gte = null, $created_at__lte = null, string $contentType = self::contentTypes['getCommentsV1CommentsObjectTypeObjectIdGet'][0])
    {

        // verify the required parameter 'x_monite_version' is set
        if ($x_monite_version === null || (is_array($x_monite_version) && count($x_monite_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_version when calling getCommentsV1CommentsObjectTypeObjectIdGet'
            );
        }

        // verify the required parameter 'object_type' is set
        if ($object_type === null || (is_array($object_type) && count($object_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object_type when calling getCommentsV1CommentsObjectTypeObjectIdGet'
            );
        }

        // verify the required parameter 'object_id' is set
        if ($object_id === null || (is_array($object_id) && count($object_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object_id when calling getCommentsV1CommentsObjectTypeObjectIdGet'
            );
        }

        // verify the required parameter 'x_monite_entity_id' is set
        if ($x_monite_entity_id === null || (is_array($x_monite_entity_id) && count($x_monite_entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_entity_id when calling getCommentsV1CommentsObjectTypeObjectIdGet'
            );
        }


        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CommentsApi.getCommentsV1CommentsObjectTypeObjectIdGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CommentsApi.getCommentsV1CommentsObjectTypeObjectIdGet, must be bigger than or equal to 1.');
        }
        







        $resourcePath = '/comments/{object_type}/{object_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'OrderEnum3', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'CommentCursorFields', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at__gt,
            'created_at__gt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at__lt,
            'created_at__lt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at__gte,
            'created_at__gte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at__lte,
            'created_at__lte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_monite_version !== null) {
            $headerParams['x-monite-version'] = ObjectSerializer::toHeaderValue($x_monite_version);
        }
        // header params
        if ($x_monite_entity_id !== null) {
            $headerParams['x-monite-entity-id'] = ObjectSerializer::toHeaderValue($x_monite_entity_id);
        }

        // path params
        if ($object_type !== null) {
            $resourcePath = str_replace(
                '{' . 'object_type' . '}',
                ObjectSerializer::toPathValue($object_type),
                $resourcePath
            );
        }
        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                '{' . 'object_id' . '}',
                ObjectSerializer::toPathValue($object_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCommentByIdV1CommentsCommentIdPatch
     *
     * Update Comment By Id
     *
     * @param  \DateTime $x_monite_version x_monite_version (required)
     * @param  string $comment_id comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse
     */
    public function updateCommentByIdV1CommentsCommentIdPatch($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'][0])
    {
        list($response) = $this->updateCommentByIdV1CommentsCommentIdPatchWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, $contentType);
        return $response;
    }

    /**
     * Operation updateCommentByIdV1CommentsCommentIdPatchWithHttpInfo
     *
     * Update Comment By Id
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CommentSchema|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCommentByIdV1CommentsCommentIdPatchWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'][0])
    {
        $request = $this->updateCommentByIdV1CommentsCommentIdPatchRequest($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CommentSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CommentSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CommentSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CommentSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CommentSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCommentByIdV1CommentsCommentIdPatchAsync
     *
     * Update Comment By Id
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommentByIdV1CommentsCommentIdPatchAsync($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'][0])
    {
        return $this->updateCommentByIdV1CommentsCommentIdPatchAsyncWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCommentByIdV1CommentsCommentIdPatchAsyncWithHttpInfo
     *
     * Update Comment By Id
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommentByIdV1CommentsCommentIdPatchAsyncWithHttpInfo($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CommentSchema';
        $request = $this->updateCommentByIdV1CommentsCommentIdPatchRequest($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCommentByIdV1CommentsCommentIdPatch'
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $comment_id (required)
     * @param  string $x_monite_entity_id The ID of the entity that owns the requested resource. (required)
     * @param  \OpenAPI\Client\Model\CreateUpdateCommentSchema $create_update_comment_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCommentByIdV1CommentsCommentIdPatchRequest($x_monite_version, $comment_id, $x_monite_entity_id, $create_update_comment_schema, string $contentType = self::contentTypes['updateCommentByIdV1CommentsCommentIdPatch'][0])
    {

        // verify the required parameter 'x_monite_version' is set
        if ($x_monite_version === null || (is_array($x_monite_version) && count($x_monite_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_version when calling updateCommentByIdV1CommentsCommentIdPatch'
            );
        }

        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling updateCommentByIdV1CommentsCommentIdPatch'
            );
        }

        // verify the required parameter 'x_monite_entity_id' is set
        if ($x_monite_entity_id === null || (is_array($x_monite_entity_id) && count($x_monite_entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_entity_id when calling updateCommentByIdV1CommentsCommentIdPatch'
            );
        }

        // verify the required parameter 'create_update_comment_schema' is set
        if ($create_update_comment_schema === null || (is_array($create_update_comment_schema) && count($create_update_comment_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_update_comment_schema when calling updateCommentByIdV1CommentsCommentIdPatch'
            );
        }


        $resourcePath = '/comments/{comment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_monite_version !== null) {
            $headerParams['x-monite-version'] = ObjectSerializer::toHeaderValue($x_monite_version);
        }
        // header params
        if ($x_monite_entity_id !== null) {
            $headerParams['x-monite-entity-id'] = ObjectSerializer::toHeaderValue($x_monite_entity_id);
        }

        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'comment_id' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_update_comment_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_update_comment_schema));
            } else {
                $httpBody = $create_update_comment_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
