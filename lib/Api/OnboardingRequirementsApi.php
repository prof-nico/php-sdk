<?php
/**
 * OnboardingRequirementsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Monite Partner API
 *
 * The Monite REST API, for Monite partners to integrate with our solution.
 *
 * The version of the OpenAPI document: 2023-03-14
 * Contact: developers@monite.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OnboardingRequirementsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OnboardingRequirementsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getEntitiesIdOnboardingRequirements' => [
            'application/json',
        ],
        'patchEntitiesIdOnboardingRequirements' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEntitiesIdOnboardingRequirements
     *
     * Get Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version x_monite_version (required)
     * @param  string $entity_id entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OnboardingRequirementsResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse
     */
    public function getEntitiesIdOnboardingRequirements($x_monite_version, $entity_id, string $contentType = self::contentTypes['getEntitiesIdOnboardingRequirements'][0])
    {
        list($response) = $this->getEntitiesIdOnboardingRequirementsWithHttpInfo($x_monite_version, $entity_id, $contentType);
        return $response;
    }

    /**
     * Operation getEntitiesIdOnboardingRequirementsWithHttpInfo
     *
     * Get Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OnboardingRequirementsResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntitiesIdOnboardingRequirementsWithHttpInfo($x_monite_version, $entity_id, string $contentType = self::contentTypes['getEntitiesIdOnboardingRequirements'][0])
    {
        $request = $this->getEntitiesIdOnboardingRequirementsRequest($x_monite_version, $entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OnboardingRequirementsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OnboardingRequirementsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OnboardingRequirementsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 416:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OnboardingRequirementsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OnboardingRequirementsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 416:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEntitiesIdOnboardingRequirementsAsync
     *
     * Get Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesIdOnboardingRequirementsAsync($x_monite_version, $entity_id, string $contentType = self::contentTypes['getEntitiesIdOnboardingRequirements'][0])
    {
        return $this->getEntitiesIdOnboardingRequirementsAsyncWithHttpInfo($x_monite_version, $entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntitiesIdOnboardingRequirementsAsyncWithHttpInfo
     *
     * Get Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesIdOnboardingRequirementsAsyncWithHttpInfo($x_monite_version, $entity_id, string $contentType = self::contentTypes['getEntitiesIdOnboardingRequirements'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OnboardingRequirementsResponse';
        $request = $this->getEntitiesIdOnboardingRequirementsRequest($x_monite_version, $entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntitiesIdOnboardingRequirements'
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEntitiesIdOnboardingRequirementsRequest($x_monite_version, $entity_id, string $contentType = self::contentTypes['getEntitiesIdOnboardingRequirements'][0])
    {

        // verify the required parameter 'x_monite_version' is set
        if ($x_monite_version === null || (is_array($x_monite_version) && count($x_monite_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_version when calling getEntitiesIdOnboardingRequirements'
            );
        }

        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling getEntitiesIdOnboardingRequirements'
            );
        }


        $resourcePath = '/entities/{entity_id}/onboarding_requirements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_monite_version !== null) {
            $headerParams['x-monite-version'] = ObjectSerializer::toHeaderValue($x_monite_version);
        }

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entity_id' . '}',
                ObjectSerializer::toPathValue($entity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchEntitiesIdOnboardingRequirements
     *
     * Update Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version x_monite_version (required)
     * @param  string $entity_id entity_id (required)
     * @param  \OpenAPI\Client\Model\TosAcceptance $tos_acceptance tos_acceptance (optional)
     * @param  \SplFileObject $verification_document_front verification_document_front (optional)
     * @param  \SplFileObject $verification_document_back verification_document_back (optional)
     * @param  \SplFileObject $additional_verification_document_front additional_verification_document_front (optional)
     * @param  \SplFileObject $additional_verification_document_back additional_verification_document_back (optional)
     * @param  \SplFileObject[] $bank_account_ownership_verification bank_account_ownership_verification (optional)
     * @param  \SplFileObject[] $company_license company_license (optional)
     * @param  \SplFileObject[] $company_memorandum_of_association company_memorandum_of_association (optional)
     * @param  \SplFileObject[] $company_ministerial_decree company_ministerial_decree (optional)
     * @param  \SplFileObject[] $company_registration_verification company_registration_verification (optional)
     * @param  \SplFileObject[] $company_tax_id_verification company_tax_id_verification (optional)
     * @param  \SplFileObject[] $proof_of_registration proof_of_registration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OnboardingRequirementsResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse
     */
    public function patchEntitiesIdOnboardingRequirements($x_monite_version, $entity_id, $tos_acceptance = null, $verification_document_front = null, $verification_document_back = null, $additional_verification_document_front = null, $additional_verification_document_back = null, $bank_account_ownership_verification = null, $company_license = null, $company_memorandum_of_association = null, $company_ministerial_decree = null, $company_registration_verification = null, $company_tax_id_verification = null, $proof_of_registration = null, string $contentType = self::contentTypes['patchEntitiesIdOnboardingRequirements'][0])
    {
        list($response) = $this->patchEntitiesIdOnboardingRequirementsWithHttpInfo($x_monite_version, $entity_id, $tos_acceptance, $verification_document_front, $verification_document_back, $additional_verification_document_front, $additional_verification_document_back, $bank_account_ownership_verification, $company_license, $company_memorandum_of_association, $company_ministerial_decree, $company_registration_verification, $company_tax_id_verification, $proof_of_registration, $contentType);
        return $response;
    }

    /**
     * Operation patchEntitiesIdOnboardingRequirementsWithHttpInfo
     *
     * Update Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  \OpenAPI\Client\Model\TosAcceptance $tos_acceptance (optional)
     * @param  \SplFileObject $verification_document_front (optional)
     * @param  \SplFileObject $verification_document_back (optional)
     * @param  \SplFileObject $additional_verification_document_front (optional)
     * @param  \SplFileObject $additional_verification_document_back (optional)
     * @param  \SplFileObject[] $bank_account_ownership_verification (optional)
     * @param  \SplFileObject[] $company_license (optional)
     * @param  \SplFileObject[] $company_memorandum_of_association (optional)
     * @param  \SplFileObject[] $company_ministerial_decree (optional)
     * @param  \SplFileObject[] $company_registration_verification (optional)
     * @param  \SplFileObject[] $company_tax_id_verification (optional)
     * @param  \SplFileObject[] $proof_of_registration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OnboardingRequirementsResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\ErrorSchemaResponse|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\ErrorSchemaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchEntitiesIdOnboardingRequirementsWithHttpInfo($x_monite_version, $entity_id, $tos_acceptance = null, $verification_document_front = null, $verification_document_back = null, $additional_verification_document_front = null, $additional_verification_document_back = null, $bank_account_ownership_verification = null, $company_license = null, $company_memorandum_of_association = null, $company_ministerial_decree = null, $company_registration_verification = null, $company_tax_id_verification = null, $proof_of_registration = null, string $contentType = self::contentTypes['patchEntitiesIdOnboardingRequirements'][0])
    {
        $request = $this->patchEntitiesIdOnboardingRequirementsRequest($x_monite_version, $entity_id, $tos_acceptance, $verification_document_front, $verification_document_back, $additional_verification_document_front, $additional_verification_document_back, $bank_account_ownership_verification, $company_license, $company_memorandum_of_association, $company_ministerial_decree, $company_registration_verification, $company_tax_id_verification, $proof_of_registration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OnboardingRequirementsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OnboardingRequirementsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OnboardingRequirementsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 416:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorSchemaResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OnboardingRequirementsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OnboardingRequirementsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 416:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchEntitiesIdOnboardingRequirementsAsync
     *
     * Update Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  \OpenAPI\Client\Model\TosAcceptance $tos_acceptance (optional)
     * @param  \SplFileObject $verification_document_front (optional)
     * @param  \SplFileObject $verification_document_back (optional)
     * @param  \SplFileObject $additional_verification_document_front (optional)
     * @param  \SplFileObject $additional_verification_document_back (optional)
     * @param  \SplFileObject[] $bank_account_ownership_verification (optional)
     * @param  \SplFileObject[] $company_license (optional)
     * @param  \SplFileObject[] $company_memorandum_of_association (optional)
     * @param  \SplFileObject[] $company_ministerial_decree (optional)
     * @param  \SplFileObject[] $company_registration_verification (optional)
     * @param  \SplFileObject[] $company_tax_id_verification (optional)
     * @param  \SplFileObject[] $proof_of_registration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEntitiesIdOnboardingRequirementsAsync($x_monite_version, $entity_id, $tos_acceptance = null, $verification_document_front = null, $verification_document_back = null, $additional_verification_document_front = null, $additional_verification_document_back = null, $bank_account_ownership_verification = null, $company_license = null, $company_memorandum_of_association = null, $company_ministerial_decree = null, $company_registration_verification = null, $company_tax_id_verification = null, $proof_of_registration = null, string $contentType = self::contentTypes['patchEntitiesIdOnboardingRequirements'][0])
    {
        return $this->patchEntitiesIdOnboardingRequirementsAsyncWithHttpInfo($x_monite_version, $entity_id, $tos_acceptance, $verification_document_front, $verification_document_back, $additional_verification_document_front, $additional_verification_document_back, $bank_account_ownership_verification, $company_license, $company_memorandum_of_association, $company_ministerial_decree, $company_registration_verification, $company_tax_id_verification, $proof_of_registration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchEntitiesIdOnboardingRequirementsAsyncWithHttpInfo
     *
     * Update Onboarding Requirements
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  \OpenAPI\Client\Model\TosAcceptance $tos_acceptance (optional)
     * @param  \SplFileObject $verification_document_front (optional)
     * @param  \SplFileObject $verification_document_back (optional)
     * @param  \SplFileObject $additional_verification_document_front (optional)
     * @param  \SplFileObject $additional_verification_document_back (optional)
     * @param  \SplFileObject[] $bank_account_ownership_verification (optional)
     * @param  \SplFileObject[] $company_license (optional)
     * @param  \SplFileObject[] $company_memorandum_of_association (optional)
     * @param  \SplFileObject[] $company_ministerial_decree (optional)
     * @param  \SplFileObject[] $company_registration_verification (optional)
     * @param  \SplFileObject[] $company_tax_id_verification (optional)
     * @param  \SplFileObject[] $proof_of_registration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEntitiesIdOnboardingRequirementsAsyncWithHttpInfo($x_monite_version, $entity_id, $tos_acceptance = null, $verification_document_front = null, $verification_document_back = null, $additional_verification_document_front = null, $additional_verification_document_back = null, $bank_account_ownership_verification = null, $company_license = null, $company_memorandum_of_association = null, $company_ministerial_decree = null, $company_registration_verification = null, $company_tax_id_verification = null, $proof_of_registration = null, string $contentType = self::contentTypes['patchEntitiesIdOnboardingRequirements'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OnboardingRequirementsResponse';
        $request = $this->patchEntitiesIdOnboardingRequirementsRequest($x_monite_version, $entity_id, $tos_acceptance, $verification_document_front, $verification_document_back, $additional_verification_document_front, $additional_verification_document_back, $bank_account_ownership_verification, $company_license, $company_memorandum_of_association, $company_ministerial_decree, $company_registration_verification, $company_tax_id_verification, $proof_of_registration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchEntitiesIdOnboardingRequirements'
     *
     * @param  \DateTime $x_monite_version (required)
     * @param  string $entity_id (required)
     * @param  \OpenAPI\Client\Model\TosAcceptance $tos_acceptance (optional)
     * @param  \SplFileObject $verification_document_front (optional)
     * @param  \SplFileObject $verification_document_back (optional)
     * @param  \SplFileObject $additional_verification_document_front (optional)
     * @param  \SplFileObject $additional_verification_document_back (optional)
     * @param  \SplFileObject[] $bank_account_ownership_verification (optional)
     * @param  \SplFileObject[] $company_license (optional)
     * @param  \SplFileObject[] $company_memorandum_of_association (optional)
     * @param  \SplFileObject[] $company_ministerial_decree (optional)
     * @param  \SplFileObject[] $company_registration_verification (optional)
     * @param  \SplFileObject[] $company_tax_id_verification (optional)
     * @param  \SplFileObject[] $proof_of_registration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEntitiesIdOnboardingRequirements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchEntitiesIdOnboardingRequirementsRequest($x_monite_version, $entity_id, $tos_acceptance = null, $verification_document_front = null, $verification_document_back = null, $additional_verification_document_front = null, $additional_verification_document_back = null, $bank_account_ownership_verification = null, $company_license = null, $company_memorandum_of_association = null, $company_ministerial_decree = null, $company_registration_verification = null, $company_tax_id_verification = null, $proof_of_registration = null, string $contentType = self::contentTypes['patchEntitiesIdOnboardingRequirements'][0])
    {

        // verify the required parameter 'x_monite_version' is set
        if ($x_monite_version === null || (is_array($x_monite_version) && count($x_monite_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_monite_version when calling patchEntitiesIdOnboardingRequirements'
            );
        }

        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling patchEntitiesIdOnboardingRequirements'
            );
        }






        if ($bank_account_ownership_verification !== null && count($bank_account_ownership_verification) < 1) {
            throw new \InvalidArgumentException('invalid value for "$bank_account_ownership_verification" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        
        if ($company_license !== null && count($company_license) < 1) {
            throw new \InvalidArgumentException('invalid value for "$company_license" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        
        if ($company_memorandum_of_association !== null && count($company_memorandum_of_association) < 1) {
            throw new \InvalidArgumentException('invalid value for "$company_memorandum_of_association" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        
        if ($company_ministerial_decree !== null && count($company_ministerial_decree) < 1) {
            throw new \InvalidArgumentException('invalid value for "$company_ministerial_decree" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        
        if ($company_registration_verification !== null && count($company_registration_verification) < 1) {
            throw new \InvalidArgumentException('invalid value for "$company_registration_verification" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        
        if ($company_tax_id_verification !== null && count($company_tax_id_verification) < 1) {
            throw new \InvalidArgumentException('invalid value for "$company_tax_id_verification" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        
        if ($proof_of_registration !== null && count($proof_of_registration) < 1) {
            throw new \InvalidArgumentException('invalid value for "$proof_of_registration" when calling OnboardingRequirementsApi.patchEntitiesIdOnboardingRequirements, number of items must be greater than or equal to 1.');
        }
        

        $resourcePath = '/entities/{entity_id}/onboarding_requirements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_monite_version !== null) {
            $headerParams['x-monite-version'] = ObjectSerializer::toHeaderValue($x_monite_version);
        }

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entity_id' . '}',
                ObjectSerializer::toPathValue($entity_id),
                $resourcePath
            );
        }

        // form params
        if ($tos_acceptance !== null) {
            $formParams['tos_acceptance'] = ObjectSerializer::toFormValue($tos_acceptance);
        }
        // form params
        if ($verification_document_front !== null) {
            $multipart = true;
            $formParams['verification_document_front'] = [];
            $paramFiles = is_array($verification_document_front) ? $verification_document_front : [$verification_document_front];
            foreach ($paramFiles as $paramFile) {
                $formParams['verification_document_front'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($verification_document_back !== null) {
            $multipart = true;
            $formParams['verification_document_back'] = [];
            $paramFiles = is_array($verification_document_back) ? $verification_document_back : [$verification_document_back];
            foreach ($paramFiles as $paramFile) {
                $formParams['verification_document_back'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($additional_verification_document_front !== null) {
            $multipart = true;
            $formParams['additional_verification_document_front'] = [];
            $paramFiles = is_array($additional_verification_document_front) ? $additional_verification_document_front : [$additional_verification_document_front];
            foreach ($paramFiles as $paramFile) {
                $formParams['additional_verification_document_front'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($additional_verification_document_back !== null) {
            $multipart = true;
            $formParams['additional_verification_document_back'] = [];
            $paramFiles = is_array($additional_verification_document_back) ? $additional_verification_document_back : [$additional_verification_document_back];
            foreach ($paramFiles as $paramFile) {
                $formParams['additional_verification_document_back'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($bank_account_ownership_verification !== null) {
            $multipart = true;
            $formParams['bank_account_ownership_verification'] = [];
            $paramFiles = is_array($bank_account_ownership_verification) ? $bank_account_ownership_verification : [$bank_account_ownership_verification];
            foreach ($paramFiles as $paramFile) {
                $formParams['bank_account_ownership_verification'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($company_license !== null) {
            $multipart = true;
            $formParams['company_license'] = [];
            $paramFiles = is_array($company_license) ? $company_license : [$company_license];
            foreach ($paramFiles as $paramFile) {
                $formParams['company_license'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($company_memorandum_of_association !== null) {
            $multipart = true;
            $formParams['company_memorandum_of_association'] = [];
            $paramFiles = is_array($company_memorandum_of_association) ? $company_memorandum_of_association : [$company_memorandum_of_association];
            foreach ($paramFiles as $paramFile) {
                $formParams['company_memorandum_of_association'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($company_ministerial_decree !== null) {
            $multipart = true;
            $formParams['company_ministerial_decree'] = [];
            $paramFiles = is_array($company_ministerial_decree) ? $company_ministerial_decree : [$company_ministerial_decree];
            foreach ($paramFiles as $paramFile) {
                $formParams['company_ministerial_decree'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($company_registration_verification !== null) {
            $multipart = true;
            $formParams['company_registration_verification'] = [];
            $paramFiles = is_array($company_registration_verification) ? $company_registration_verification : [$company_registration_verification];
            foreach ($paramFiles as $paramFile) {
                $formParams['company_registration_verification'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($company_tax_id_verification !== null) {
            $multipart = true;
            $formParams['company_tax_id_verification'] = [];
            $paramFiles = is_array($company_tax_id_verification) ? $company_tax_id_verification : [$company_tax_id_verification];
            foreach ($paramFiles as $paramFile) {
                $formParams['company_tax_id_verification'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($proof_of_registration !== null) {
            $multipart = true;
            $formParams['proof_of_registration'] = [];
            $paramFiles = is_array($proof_of_registration) ? $proof_of_registration : [$proof_of_registration];
            foreach ($paramFiles as $paramFile) {
                $formParams['proof_of_registration'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
